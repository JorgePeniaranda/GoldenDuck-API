generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum role {
  ADMIN
  SUPPORT
  USER
}

enum sex {
  MALE
  FEMALE
}

enum typeCode {
  EMAIL
  PHONE
}

model User {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  lastName    String   @map("last_name") @db.VarChar(255)
  dni         BigInt
  email       String   @db.VarChar(320)
  phoneNumber BigInt   @map("phone_number")
  password    String   @db.VarChar(120)
  salt        String   @db.VarChar(32)
  address     String   @db.VarChar(255)
  birthDate   DateTime @map("birth_date")
  sex         sex
  imgUrl      String?  @map("img_url") @db.VarChar(255)
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")
  actived     Boolean  @default(false)
  deleted     Boolean  @default(false)
  role        role     @default(USER)

  // Relations
  account          Account[]
  sessions         Session[]
  notifications    Notification[]
  messagesSend     Message[]      @relation(name: "idSender")
  messagesReceived Message[]      @relation(name: "idReceiver")
  activities       Activity[] // falta implementar
  codes            Code[]
}

model Account {
  id        Int      @id @default(autoincrement())
  idUser    Int      @map("id_user")
  balance   BigInt   @default(0)
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  deleted   Boolean  @default(false)

  // Relations
  user                 User          @relation(fields: [idUser], references: [id])
  cards                Card[]
  transactionsSend     Transaction[] @relation(name: "idSender")
  transactionsReceived Transaction[] @relation(name: "idReceiver")
  loans                Loan[]
  investments          Investment[]
}

model Activity {
  id        Int      @id @default(autoincrement())
  idUser    Int?     @map("id_user")
  action    String   @db.VarChar(10)
  details   String?  @db.Text
  createdAt DateTime @default(now()) @map("create_at")

  // Relations
  user User? @relation(fields: [idUser], references: [id])
}

model Card {
  id         Int      @id @default(autoincrement())
  idAccount  Int      @map("id_account")
  number     BigInt
  cvv        Int
  expiration DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt
  deleted    Boolean  @default(false)

  // Relations
  account Account @relation(fields: [idAccount], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  deleted   Boolean  @default(false)

  // Relations
  transactions Transaction[]
}

model Code {
  id        String   @id @default(uuid())
  idUser    Int      @map("id_user")
  code      String   @db.Text
  type      typeCode
  expiredAt DateTime @map("expired_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  expired   Boolean  @default(false)

  // Relations
  user User @relation(fields: [idUser], references: [id])
}

model Error {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  message   String?  @db.Text
  stack     String?  @db.LongText
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @map("created_at")
  deleted   Boolean  @default(false)
}

model Investment {
  id        Int      @id @default(autoincrement())
  idAccount Int      @map("id_account")
  amount    BigInt
  interest  Float
  dateEnd   DateTime @map("date_end")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  canceled  Boolean  @default(false)

  // Relations
  account Account @relation(fields: [idAccount], references: [id])
}

model Loan {
  id        Int      @id @default(autoincrement())
  idAccount Int      @map("id_account")
  amount    BigInt
  interest  Float
  dateEnd   DateTime @map("date_end")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  canceled  Boolean  @default(false)

  // Relations
  account Account @relation(fields: [idAccount], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  idSender   Int      @map("id_sender")
  idReceiver Int      @map("id_receiver")
  message    String   @db.Text
  read       Boolean  @default(false)
  updatedAt  DateTime @updatedAt @map("updated_at")
  createdAt  DateTime @default(now()) @map("created_at")
  deleted    Boolean  @default(false)

  // Relations
  Sender   User @relation(name: "idSender", fields: [idSender], references: [id])
  Receiver User @relation(name: "idReceiver", fields: [idReceiver], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  idUser    Int      @map("id_account")
  message   String   @db.Text
  read      Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [idUser], references: [id])
}

model Session {
  id         Int       @id @default(autoincrement())
  idUser     Int       @map("id_user")
  ip         String?   @db.VarChar(50)
  userAgent  String?   @map("user_agent") @db.VarChar(255)
  location   String?   @db.VarChar(255)
  deviceType String?   @map("device_type") @db.VarChar(50)
  token      String    @db.Text
  active     Boolean   @default(true)
  logoutAt   DateTime? @map("logout_at")
  expiredAt  DateTime  @map("expired_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [idUser], references: [id])
}

model Transaction {
  id         Int      @id @default(autoincrement())
  idSender   Int      @map("id_sender")
  idReceiver Int      @map("id_receiver")
  amount     BigInt
  idCategory Int?     @map("id_category")
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now()) @map("created_at")
  canceled   Boolean  @default(false)

  // Relations
  Sender   Account   @relation(name: "idSender", fields: [idSender], references: [id])
  Receiver Account   @relation(name: "idReceiver", fields: [idReceiver], references: [id])
  category Category? @relation(fields: [idCategory], references: [id])
}
